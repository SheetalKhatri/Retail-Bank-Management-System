@model RetailBankManagementSystem.Models.PagingList<RetailBankManagementSystem.Models.Account>
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<h4>What would you like to do today, @User.Identity.Name.Split('@')[0][0].ToString().ToUpper()@User.Identity.Name.Split('@')[0].Substring(1)?</h4>
<hr />
<br />

<div class="container">
    <h4>Accounts</h4>
    <hr />
    @if (TempData["depositMoney"] != null)
    {

        <div class="row justify-content-center">
            <span class="alert alert-success alert-dismissible fade show small" style="text-align: center; display: inline-flex">@TempData["depositMoney"]<button class="close " data-dismiss="alert">&times;</button></span>
        </div>
    }

    @if (TempData["withdrawMoney"] != null)
    {
        <div class="row justify-content-center">
            <span class="alert alert-success alert-dismissible fade show small" style="text-align: center; display: inline-flex">@TempData["withdrawMoney"]<button class="close " data-dismiss="alert">&times;</button></span>
        </div>
    }
    @if (TempData["TransferSuccess"] != null)
    {
        <div class="row justify-content-center">
            <span class="alert alert-success alert-dismissible fade show small" style="text-align: center; display:inline-flex">@TempData["TransferSuccess"]<button class="close " data-dismiss="alert">&times;</button></span>
        </div>
    }
    @if (TempData["depositMinBalance"] != null)
    {
        <div class="row justify-content-center">
            <span class="alert alert-warning alert-dismissible fade show small" style="text-align: center; display: inline-flex">@TempData["depositMinBalance"]<button class="close " data-dismiss="alert">&times;</button></span>
        </div>
    }
    @if (TempData["SourceMinBalance"] != null)
    {
        <div class="row justify-content-center">
            <span class="alert alert-warning alert-dismissible fade show small" style="text-align: center; display: inline-flex">@TempData["SourceMinBalance"]<button class="close " data-dismiss="alert">&times;</button></span>
        </div>
    }
    @if (TempData["withdrawMinBalance"] != null)
    {
        <div class="row justify-content-center">
            <span class="alert alert-warning alert-dismissible fade show small" style="text-align: center; display: inline-flex">@TempData["withdrawMinBalance"]<button class="close " data-dismiss="alert">&times;</button></span>
        </div>
    }
    @if (TempData["TargetMinBalance"] != null)
    {
        <div class="row justify-content-center">
            <span class="alert alert-warning alert-dismissible fade show small" style="text-align: center; display: inline-flex">@TempData["TargetMinBalance"]<button class="close " data-dismiss="alert">&times;</button></span>
        </div>
    }
    <br />
    <table class="table table-bordered table-sm" style="background-color:white">
        <thead class="thead-dark">
        <th>Customer ID</th>
        <th>Account ID</th>
        <th>Account Type</th>
        <th>Account Status</th>
        <th>Balance</th>
        <th>Action</th>
        </thead>
        @foreach (Account account in Model)
        {
            <tr>
                <td>
                    @account.CustomerID
                </td>
                <td>
                    @account.AccountID
                </td>
                <td>
                    @account.AccountType[0].ToString().ToUpper()@account.AccountType.Substring(1)
                </td>
                <td>
                    @account.AccountStatus[0].ToString().ToUpper()@account.AccountStatus.Substring(1)
                </td>
                <td>
                    $@account.Balance
                </td>
                @if (account.AccountStatus.ToLower().Equals("pending"))
                {
                    <td>
                        <span class="text-danger">Account is not active</span>
                    </td>
                }
                @if (!account.AccountStatus.ToLower().Equals("pending"))
                {
                    <td>
                        @Html.ActionLink("Deposit", "Deposit", "Cashier", new { accountID = account.AccountID }) |
                        @Html.ActionLink("Withdraw", "Withdraw", "Cashier", new { accountID = account.AccountID }) |
                        @Html.ActionLink("Transfer", "Transfer", new { AccountID = account.AccountID }) |
                        @Html.ActionLink("Statement", "ViewStatement", "Cashier", new { ID = account.AccountID })
                    </td>
                }
            </tr>
        }
    </table>
    <br />

    <script type="text/javascript">
        window.setTimeout(function () {
            $(".alert").fadeTo(500, 0).slideUp(500, function () {
                $(this).hide();
            });
        }, 5000);
    </script>

    @{
        var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.HasNextPage ? "disabled" : "";
        var totalPageNo = Model.TotalPageNo;
        var currentPageNo = Model.PageIndex;
    }

    <div class="row justify-content-center">
        <a asp-action="Index"
           asp-route-pageNumber="@(Model.PageIndex - 1)"
           class="btn @prevDisabled " style="text-decoration: underline">
            << prev
        </a>
        <span>
            Page : @currentPageNo of @totalPageNo
        </span>
        <a asp-action="Index"
           asp-route-pageNumber="@(Model.PageIndex + 1)"
           class="btn @nextDisabled" style="text-decoration: underline">
            next >>
        </a>
    </div>
</div>
